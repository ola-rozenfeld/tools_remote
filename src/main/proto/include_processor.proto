// Copyright 2019 The Bazel Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// This file contains the protocol used to communicate between the Bazel client
// and the server. At a high level clients may call the CommandServer.run rpc
// to initiates a Bazel command and CommandServer.cancel to cancel an in-flight
// command. CommandServer.ping may be used to check for server liveness without
// executing any commands. See documentation of individual messages for more
// details.
syntax = "proto3";

package include_processor;

option java_package = "com.google.devtools.build.lib.include_processor";
option java_multiple_files = true;
option java_outer_classname = "IncludeProcessorProto";

message ProcessIncludesRequest {
  // Current working directory.
  string cwd = 1;

  // Command arguments.
  repeated string args = 2;

  // Environment variables in name=value format.
  repeated string envs = 3;

  // An optional command identifier.
  string command_id = 4;
}

message ProcessIncludesResponse {
  repeated string includes = 1;
  int32 time_msec = 2;
}

message Stat {
  message Outlier {
    string name = 1;
    int64 value = 2;
  }
  double median = 1;
  double percentile_75 = 2;
  double percentile_85 = 3;
  double percentile_95 = 4;
  int64 total = 5;
  repeated Outlier outliers = 6;
}

message StatsRequest {}

message IncludeProcessorStats {
  Stat total = 1;
  int32 compiler_info_cache_misses = 2;
  float compiler_info_cache_hit_ratio = 3;
}

message StatsResponse {
  IncludeProcessorStats stats = 1;
}

service ProcessIncludesService {
  // Get dependencies of a command from a remote service.
  rpc ProcessIncludes (ProcessIncludesRequest) returns (ProcessIncludesResponse) {}

  // Gets information about executed commands.
  rpc Stats (StatsRequest) returns (StatsResponse) {}
}
