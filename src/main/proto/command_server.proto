// Copyright 2019 The Bazel Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// This file contains the protocol used to communicate between the Bazel client
// and the server. At a high level clients may call the CommandServer.run rpc
// to initiates a Bazel command and CommandServer.cancel to cancel an in-flight
// command. CommandServer.ping may be used to check for server liveness without
// executing any commands. See documentation of individual messages for more
// details.
syntax = "proto3";

package remote_client;

import "build/bazel/remote/execution/v2/remote_execution.proto";
import "google/protobuf/timestamp.proto";

option java_package = "com.google.devtools.build.lib.remote.proxy";
option java_multiple_files = true;
option java_outer_classname = "CommandServerProto";

// Passed to CommandServer.run to initiate execution of a remote command.
message RunRequest {
  // Command and command arguments. Does not include startup arguments.
  repeated string command = 1;
}

message RunResult {
  enum Status {
    UNKNOWN = 0;
    SUCCESS = 1;
    CACHE_HIT = 2;
    NON_ZERO_EXIT = 3;
    TIMEOUT = 4;
    INTERRUPTED = 5;
    REMOTE_ERROR = 6;
    LOCAL_ERROR = 7;
  }
  // Status of the finished run.
  Status status = 1;

  // Command exit code.
  int32 exit_code = 2;

  // Optional exception trace or other message that should be displayed.
  string message = 3;

  build.bazel.remote.execution.v2.ExecutedActionMetadata metadata = 4;
}

// Contains metadata and result data for a command execution.
message RunResponse {
  // Standard out of the command, chunked. May be empty.
  string stdout = 1;

  // Standard error of the command, chunked. May be empty.
  string stderr = 2;

  RunResult result = 3;
}

message Stat {
  message Outlier {
    string name = 1;
    int64 value = 2;
  }
  double median = 1;
  double percentile_75 = 2;
  double percentile_85 = 3;
  double percentile_95 = 4;
  int64 total = 5;
  int64 total_parallel_time_ms = 6;
  repeated Outlier outliers = 7;
}

// These are all milliseconds.
message RemoteExecutionStats {
  Stat queued = 1;
  Stat worker = 2;
  Stat input_fetch = 3;
  Stat execution = 4;
  Stat output_upload = 5;
}

// These are all milliseconds.
message LocalExecutionStats {
  Stat queued = 1;
  Stat compute_input_tree = 2;
  Stat check_action_cache = 3;
  Stat upload_inputs = 4;
  Stat execute = 5;
  Stat download_outputs = 6;
  Stat total_local = 7;
}

message ActionStats {
  Stat num_inputs = 1;
  Stat total_input_bytes = 2;
  Stat num_outputs = 3;
  Stat total_output_bytes = 4;
}

message ProxyStats {
  message StatByStatus {
    RunResult.Status status = 1;
    int32 count = 2;
  }
  message StatByStage {
    RunRecord.Stage stage = 1;
    int32 count = 2;
  }
  google.protobuf.Timestamp start_ts = 1;
  google.protobuf.Timestamp end_ts = 2;
  repeated StatByStatus finished_by_status = 3;
  repeated StatByStage records_by_stage = 4;
  int32 cas_cache_misses = 5;
  float cas_cache_hit_ratio = 6;
  float ac_cache_hit_ratio = 7;
  int32 local_fallback_total = 8;
  ActionStats action_stats = 9;
  LocalExecutionStats local_execution_stats = 10;
  RemoteExecutionStats remote_execution_stats = 11;
}

// Wraps RunRemoteCommand parameters.
message RunCommandParameters {
  string build_request_id = 1;
  string invocation_id = 2;
  string name = 3;
  bool accept_cached = 4;
  bool do_not_cache = 5;
  repeated string inputs = 6;
  repeated string output_files = 7;
  repeated string output_directories = 8;
  repeated string command = 9;
  repeated string ignore_inputs = 10;
  map<string,string> environment_variables = 11;
  map<string,string> platform = 12;
  string server_logs_path = 13;
  int32 execution_timeout = 14;
}

message LocalTimestamps {
  google.protobuf.Timestamp queued_start = 1;
  google.protobuf.Timestamp queued_end = 2;
  google.protobuf.Timestamp input_tree_start = 3;
  google.protobuf.Timestamp input_tree_end = 4;
  google.protobuf.Timestamp check_action_cache_start = 5;
  google.protobuf.Timestamp check_action_cache_end = 6;
  google.protobuf.Timestamp upload_inputs_start = 7;
  google.protobuf.Timestamp upload_inputs_end = 8;
  google.protobuf.Timestamp execute_start = 9;
  google.protobuf.Timestamp execute_end = 10;
  google.protobuf.Timestamp download_outputs_start = 11;
  google.protobuf.Timestamp download_outputs_end = 12;
  // More when local fallback is implemented.
}

message ActionMetadata {
  int32 num_inputs = 1;
  int64 total_input_bytes = 2;
  int32 num_outputs = 3;
  int64 total_output_bytes = 4;
  int32 cas_cache_misses = 5;
}

message RunRecord {
  // Execution stages, in topological order.
  enum Stage {
    UNKNOWN = 0;
    QUEUED = 1;
    COMPUTING_INPUT_TREE = 2;
    CHECKING_ACTION_CACHE = 3;
    UPLOADING_INPUTS = 4;
    EXECUTING = 5;
    DOWNLOADING_OUTPUTS = 6;
    LOCAL_FALLBACK_EXECUTING = 7;
    LOCAL_FALLBACK_UPLOADING_OUTPUTS = 8;
    FINISHED = 9;
  }
  Stage stage = 1;
  RunCommandParameters command_parameters = 2;
  RunResult result = 3;
  ActionMetadata action_metadata = 4;
  LocalTimestamps local_timestamps = 5;
  RunResult result_before_local_fallback = 6;
}

message StatsRequest {
  bool full = 1;
  google.protobuf.Timestamp from_ts = 2;
  google.protobuf.Timestamp to_ts = 3;
  string invocation_id = 4;
  RunResult.Status status = 5;
}

message StatsResponse {
  ProxyStats proxy_stats = 1;
  repeated RunRecord run_records = 2;
}

message FetchRecordRequest {
  string command_id = 1;
}

message FetchRecordResponse {
  RunRecord record = 1;
}

service CommandService {
  // Run a remote command and wait for completion.
  rpc Run (RunRequest) returns (stream RunResponse) {}

  // Gets information about currently executing commands.
  rpc Stats (StatsRequest) returns (stream StatsResponse) {}

  // Fetches an executed command by id.
  rpc FetchRecord (FetchRecordRequest) returns (FetchRecordResponse) {}
}